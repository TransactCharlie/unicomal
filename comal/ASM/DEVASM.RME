
      ****************************************************************

                        A description of the files in

                     the assembler development directory

      ****************************************************************

This text describes the contents of the development directory for assembly
language coded modules for COMAL version 3.11.

It is necessary to have a macro assembler which is compatible with
Microsoft MASM version 2.0 or later. Furthermore, you must have a LINK.EXE
program to link the files generated by the assembler.

If you have a MAKE utility, you can build modules using the rules described
in the ASCII file MAKEFILE.


FILE NAME       DESCRIPTION
=========       ===========

DEV      RME    contains this document.

EDITOR   SYM    is an include-file declaring symbols to use with the
                COMAL screen handling.

GENML    EXE    is used to translate a .MOD module defintion file
                into an .ASM and .INC file.

GENMLP   EXE    is an OS/2 mode version of GENML.EXE

MAKEFILE        When you have a MAKE-tool, this file contains rules
                on how to build the modules.

MAKEML   BAT    Use this batch file when you don't have a MAKE-tool.
                For example: makeml timer
                generates the module timer.exe from the files
                        timerd.mod   -- The COMAL module interface
                        timer.asm    -- The assembly language implementation

MODML    INC    must be included in your .ASM files. It contains symbol
                declarations used by assembly language coded modules.

MODML    OBJ    This file must be linked together with your own .OBJ files
                when linking the .EXE file.


The modules sig1 and sig2 export nothing. They only print the signals
they receive from the COMAL system. The modules are useful when you
want to see when the signals are issued. If you use both modules,
you can see that some signals are sent from the first loaded module
to the last and others are sent in the opposite direction.

In order to generate the modules, type

        makeml sig1     or      make sig1
        makeml sig2     or      make sig2


The files concerning the sig1 module are:

SIG1D    MOD    is a SAVEd COMAL module describing the interface to
                the sig1 module.

SIG1D    ASM    The GENML.EXE program generates a SIG1D.ASM which
                contains an assembly language version of SIG1D.MOD.
                It is the interface part of the module.
                This file must be assembled and linked with the other
                .OBJ files.

SIG1D    INC    This file contains EQUates used by the assembly language
                coded procedures and functions. In this case it is empty.

SIG1     ASM    is the implementation part of the module.

SIG1     EXE    is the final module which can be used directly by COMAL,
                like any other module.

The files concerning the sig1 module are:

SIG2D    MOD    is a SAVEd COMAL module describing the interface to
                the sig2 module.

SIG2D    ASM    The GENML.EXE program generates a SIG2D.ASM which
                contains an assembly language version of SIG2D.MOD.
                It is the interface part of the module.
                This file must be assembled and linked with the other
                .OBJ files.

SIG2D    INC    This file contains EQUates used by the assembly language
                coded procedures and functions. In this case it is empty.

SIG2     ASM    is the implementation part of the module.

SIG2     EXE    is the final module.


The module named template can be used as a template to fill out with your
own procedures and function. The module can be generated by typing

        makeml templt   or      make templt

The following files has to do with this module:

TEMPLT   MLS    is a LISTed version of TEMPLTD.MOD.
TEMPLTD  MOD    is a SAVEd module interface file.
TEMPLTD  ASM    is generated by GENML.EXE.
TEMPLTD  INC    is also generated by GENML.EXE.
TEMPLT   ASM    is the implementation part.
TEMPLT   EXE    is the final linked module.


The module called test contains a number of procedures and functions
which shows the different kinds of parameter passing, how to return
function values, how to index arrays, and how to use the routines
supplied by the COMAL system. The module can be assembled by typing

        makeml test     or      make test

The following files are used when generating the module:

TEST     MLS    is a LISTed version of TESTD.MOD.
TESTD    MOD    is a SAVEd module interface file.
TESTD    ASM    is generated by GENML.EXE.
TESTD    INC    is also generated by GENML.EXE.
TEST     ASM    is the implementation part.
TEST     EXE    is the final linked module.

TESTML   LST    is a LISTed program validating the module test.


The unitimer module following with the COMAL system is an example of
event handling. It is supplied here with source code. If you want to
program a module, which supplies event handling, you can use what
you want from this example. For a description of the unitimer module,
choose it from the main menu of the help text system. To generate
the module, type

        makeml timer    or      make unitimer

The following files are supplied:

TIMER    MLS    is a LISTed version of TIMERD.MOD.
TIMERD   MOD    is a SAVEd module interface file.
TIMERD   ASM    is generated by GENML.EXE.
TIMERD   INC    is also generated by GENML.EXE.
TIMER    ASM    is the implementation part.
UNITIMER EXE    is the final linked module.
TIMER1   LST    is a program demonstrating unitimer.

-------------------------------------------------------------------------------

There are a number of calls available when programming assembler modules which
are not described in the manual. They are described below. The EXTRN
specifications of the subroutines are described in MODML.INC.

;--- Directory handling -------------------------------------------------------
;
;    Subroutine dir_entry
;    ====================
;
;    Formats dta into dir entry the Comal DIR way. The directory
;    must have been opened prior to this call (with DOS FindFirst).
;
;    Example:
;      ARR     .DAT       320  90-04-17  21:48
;
;    Entry:
;         DS:DX     pointer to dta
;         ES:DI     pointer to string result (39 characters long)
;
;
;    Subroutine check_dir
;    ====================
;
;    Reformats directory string. Is used to reformat pattern
;    before DOS FindFirst is called.
;
;    The following conversion is done:
;       d:                         into    d:*.*
;       [d:][path]\                into    [d:][path]\*.*
;       [d:][[path]\]name          into    [d:][[path]\]name.*
;       [d:][[path]\].[ext]        into    [d:][[path]\]*.[ext]
;       [d:][[path]\]name.[ext]    into    [d:][[path]\]name.[ext]
;
;    Entry:
;       DS:DX:           Address of string.
;
;    Exit:
;       AX, BX, CX, SI   Not preserved.
;
;
;--- Screen buffer input & output ---------------------------------------------
;
;    Subroutine get_char
;    ===================
;
;    Read character at cursor.
;
;    ENTRY:
;
;    EXIT:
;      (AH,AL) = (attribute,character)
;      BX: destroyed.
;
;
;    Subroutine put_char
;    ===================
;
;    Write character at cursor.
;
;    ENTRY:
;      (AH,AL) = (attribute,character)
;
;    EXIT:
;      AX, BX            Not preserved
;
;
;    Subroutine move_from
;    ====================
;
;    Copy string from screen buffer to string. Each character in the
;    string consists of an ASCII value and an attribute value (two bytes).
;
;    Entry:
;      ES:DI      Address of string
;      CX         Length of string (2*CX bytes)
;      DH,DL      Row & column, where to copy from.
;
;    Exit:
;      AX, BX     Destroyed
;      DI         Incremented by 2*CX
;
;    Subroutine move_to
;    ==================
;
;    Move string to screen buffer. The string is as described for MOVE_FROM.
;
;    Entry:
;      DS:SI     Address of string
;      CX        Length of string (2*CX bytes)
;      DH,DL     Row & column, where to store from.
;
;    Exit:
;      AX, BX    Destroyed
;      SI        Incremented by 2*CX
;
;
;--- Keyboard handling routines -----------------------------------------------
;
;    The Comal system uses two routines for handling the keyboard:
;
;      test_key:   Test keystroke status.
;                     Entry:
;                       Nothing
;                     Exit:
;                       ZF  = 1    No code available
;                           = 0    Code is available
;                       AL         ASCII character code
;                       AH         Scan code
;
;
;      read_key:   Get keystroke from keyboard buffer. If no key available,
;                  wait for it.
;                     Entry:
;                       Nothing
;                     Exit:
;                       AL         ASCII character code
;                       AH         Scan code
;
;    A module can supercede the keyboard handling, by changing
;    vectors with the two calls set_test_key and set_read_key. This can be
;    useful when a module needs to redirect the keyboard handling or
;    add special handling to it, like the UniMouse-module does with its
;    event control character, CHR$(0)+CHR$(8).
;
;
;    Subroutine set_test_key
;    =======================
;
;    Sets address for test_key routine.
;
;    Entry:
;      DX:SI      Address of new routine.
;
;    Exit:
;      DX:SI      Address of previous routine.
;
;
;    Subroutine set_read_key
;    =======================
;
;    Sets address for read_key routine
;
;    Entry:
;      DX:SI      Address of new routine.
;
;    Exit:
;      DX:SI      Address of previous routine.
;
;------------------------------------------------------------------------------
